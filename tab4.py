import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
import numpy as np
import google.generativeai as genai
from sklearn.ensemble import RandomForestRegressor
import re
# === Page Config ===
st.set_page_config(
    page_title="üöò Car Assistant",
    page_icon="üß†",
    layout="wide"
)
st.markdown("""
<link href="https://fonts.googleapis.com/css2?family=Germania+One&display=swap" rel="stylesheet">
<style>
html, body, [class*="css"], h1, h2, h3, h4, h5, h6,
.stMarkdown, .stHeader, .stSubheader, .stText, .stTitle {
    font-family: 'Germania One', cursive, sans-serif !important;
}
</style>
""", unsafe_allow_html=True)


# === THEME SWITCHER ===
theme = st.radio("üåó –¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", ["‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è", "üåô –¢—ë–º–Ω–∞—è"], horizontal=True)

if theme == "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è":
    background_color = "#f5f0e6"; text_color = "#1f1f1f"
    button_color = "#e0dbd1"; hover_color = "#d1cfc7"
else:
    background_color = "#1E1E1E"; text_color = "#FFFDFD"
    button_color = "#717070"; hover_color = "#444444"

# === Dynamic CSS ===
st.markdown(f"""
<style>
html, body, [class*="css"], .main, .block-container {{
    background-color: {background_color} !important;
    color: {text_color} !important;
    font-size: 18px !important;
}}
h1, h2, h3, h4, h5, h6, p, span, label, div {{
    color: {text_color} !important;
    font-weight: 600 !important;
}}
.stButton > button {{
    background-color: {button_color};
    color: {text_color};
    border: 1px solid #888;
    padding: 0.7rem 1.4rem;
    border-radius: 14px;
    font-size: 17px;
    font-weight: 700;
    transition: 0.3s ease-in-out;
}}
.stButton > button:hover {{
    background-color: {hover_color};
    transform: scale(1.05);
}}
input, textarea, select {{
    background-color: {button_color} !important;
    color: {text_color} !important;
    border-radius: 8px !important;
    font-size: 16px !important;
}}
::placeholder {{
    color: {text_color}99 !important;
}}
.card {{
    border: 2px solid #aaa;
    border-radius: 12px;
    padding: 16px;
    background-color: #fdfdfd;
    margin-bottom: 1em;
}}
.dark .card {{
    background-color: #2c2c2c;
}}
</style>
""", unsafe_allow_html=True)

def show_card(title, content):
    st.markdown(f"""
    <div class='card'>
        <h4>{title}</h4>
        <p>{content}</p>
    </div>
    """, unsafe_allow_html=True)

# === AI –ü–æ–¥–±–æ—Ä Gemini ===
genai.configure(api_key="AIzaSyAv1xsDITJNVKMtPSVN8gQfYgOWcIPBoDo")
model = genai.GenerativeModel("models/gemini-1.5-flash")

body_types = {
    '–ø–∏–∫–∞–ø': "–ü–∏–∫–∞–ø ‚Äî —ç—Ç–æ –º–æ—â–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –≥—Ä—É–∑–æ–≤—ã–º –æ—Ç—Å–µ–∫–æ–º...",
    '–º–∏–Ω–∏–≤—ç–Ω': "–ú–∏–Ω–∏–≤—ç–Ω ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å...",
    '–∫—Ä–æ—Å—Å–æ–≤–µ—Ä': "–ö—Ä–æ—Å—Å–æ–≤–µ—Ä ‚Äî —ç—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å...",
    '—Å–µ–¥–∞–Ω': "–°–µ–¥–∞–Ω ‚Äî –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è...",
    '—Ö—ç—Ç—á–±–µ–∫': "–•—ç—Ç—á–±–µ–∫ ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å...",
    '—É–Ω–∏–≤–µ—Ä—Å–∞–ª': "–£–Ω–∏–≤–µ—Ä—Å–∞–ª ‚Äî –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–¥–ª–∏–Ω—ë–Ω–Ω—ã–º –∫—É–∑–æ–≤–æ–º...",
    '–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫': "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ ‚Äî –∫—Ä—É–ø–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å—é..."
}

transmissions = {
    '–∞–≤—Ç–æ–º–∞—Ç': "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–ª–∞–≤–Ω—É—é –µ–∑–¥—É...",
    '–º–µ—Ö–∞–Ω–∏–∫–∞': "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á –¥–∞—ë—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å..."
}

fuels = {
    '–±–µ–Ω–∑–∏–Ω': "–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ö–æ—Ä–æ—à—É—é –¥–∏–Ω–∞–º–∏–∫—É...",
    '–¥–∏–∑–µ–ª—å': "–î–∏–∑–µ–ª—å–Ω—ã–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å—é...",
    '—ç–ª–µ–∫—Ç—Ä–æ': "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–µ...",
    '–≥–∏–±—Ä–∏–¥': "–ì–∏–±—Ä–∏–¥–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å–æ–≤–º–µ—â–∞—é—Ç –±–µ–Ω–∑–∏–Ω–æ–≤—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å –∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä..."
}

body_map = {
    '–ø–∏–∫–∞–ø': 'pickup',
    '–º–∏–Ω–∏–≤—ç–Ω': 'minivan',
    '–∫—Ä–æ—Å—Å–æ–≤–µ—Ä': 'crossover',
    '—Å–µ–¥–∞–Ω': 'sedan',
    '—Ö—ç—Ç—á–±–µ–∫': 'hatchback',
    '—É–Ω–∏–≤–µ—Ä—Å–∞–ª': 'wagon',
    '–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫': 'suv'
}

trans_map = {
    '–∞–≤—Ç–æ–º–∞—Ç': 'automatic',
    '–º–µ—Ö–∞–Ω–∏–∫–∞': 'mechanical'
}

fuel_map = {
    '–±–µ–Ω–∑–∏–Ω': 'gasoline',
    '–¥–∏–∑–µ–ª—å': 'diesel',
    '—ç–ª–µ–∫—Ç—Ä–æ': 'electro',
    '–≥–∏–±—Ä–∏–¥': 'hybrid'
}

# === Odometer Checker ===
@st.cache_data
def load_data():
    df = pd.read_csv("22613data.csv")
    df.columns = df.columns.str.strip()
    return df

@st.cache_data
def preprocess_odometer_model(df):
    df = df.copy()
    df = df.dropna(subset=["Year", "Volume", "Mileage", "Mark"])
    group_median = (
        df.groupby(["Year", "Mark", "Volume"])["Mileage"]
        .median()
        .reset_index()
        .rename(columns={"Mileage": "MedianMileage"})
    )
    df = df.merge(group_median, on=["Year", "Mark", "Volume"], how="left")
    df["OdometerNormal"] = (df["Mileage"] >= 0.65 * df["MedianMileage"]).astype(int)
    cat_cols = ["Mark", "Fuel Type", "Transmission", "Car_type"]
    le_dict = {}
    for col in cat_cols:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        le_dict[col] = le
    features = ["Year", "Volume", "Mileage", "Mark", "Fuel Type", "Transmission", "Car_type"]
    X = df[features]
    y = df["OdometerNormal"]
    return X, y, le_dict

@st.cache_data
def train_odometer_model(X, y):
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X, y)
    return model
@st.cache_data
def train_price_model(df,_encoders):
    df = df.copy()
    df = df.dropna(subset=["Price", "Year", "Mileage"])
    df = df[df["Price"] > 100000]

    for col in categorical_cols:
        df[col] = df[col].astype(str).str.upper()
        df[col] = encoders[col].transform(df[col])

    X = df[["Company", "Mark", "Year", "Fuel Type", "Transmission", "Mileage", "Car_type"]]
    y = df["Price"]
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X, y)
    return model

# === Interface ===
st.title("üöò Car Assistant")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
raw_data = load_data()

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
categorical_cols = ["Company", "Mark", "Fuel Type", "Transmission", "Car_type"]
encoders = {col: LabelEncoder().fit(raw_data[col].astype(str).str.upper()) for col in categorical_cols}

# –¢abs
tabs = st.tabs(["AI –ø–æ–¥–±–æ—Ä", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–µ–≥–∞", "–û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω—ã", "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üí¨ –û—Ç–∑—ã–≤—ã"])

# === Tab 1: AI –ø–æ–¥–±–æ—Ä ===
with tabs[0]:
    st.header("üß†–ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ")
    user_input = st.text_input("–û–ø–∏—à–∏, –∫–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Ç–µ–±–µ –Ω—É–∂–µ–Ω:")

    if user_input:
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
            prompt = f"""
–¢—ã ‚Äî –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç. –ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ–¥–±–∏—Ä–∞–µ—à—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –º–∞—à–∏–Ω—ã –ø–æ–¥ –∑–∞–ø—Ä–æ—Å.
–ù–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—à—å, —á—Ç–æ–±—ã —Ç–∞–∫–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä —Å –º–µ—Ö–∞–Ω–∏–∫–æ–π.
–û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.
"{user_input}"

–û–ø–∏—Å–∞–Ω–∏—è –∫—É–∑–æ–≤–∞:
{chr(10).join([f"{k} ‚Äî {v}" for k, v in body_types.items()])}

–û–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏:
{chr(10).join([f"{k} ‚Äî {v}" for k, v in transmissions.items()])}

–û–ø–∏—Å–∞–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞:
{chr(10).join([f"{k} ‚Äî {v}" for k, v in fuels.items()])}

–û—Ç–≤–µ—Ç—å:
1. –õ—É—á—à–∏–π —Ç–∏–ø –∫—É–∑–æ–≤–∞ (—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º)
2. –õ—É—á—à–∞—è —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è (—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º)
3. –õ—É—á—à–∏–π —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ (—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º)
–¢–∞–∫ –∂–µ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤—å —á—Ç–æ –Ω–∏–±—É–¥—å –æ—Ç —Å–µ–±—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –∫–∞–∫–æ–π –ø—Ä–∏–≤–æ–¥ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
4. –û–±—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ + –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤ –±—é–¥–∂–µ—Ç–Ω–æ–º, —Å—Ä–µ–¥–Ω–µ–º –∏ –ø—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ + –≥–æ–¥ –∞–≤—Ç–æ, –≤–∞–∂–Ω–æ —á—Ç–æ –±—ã —ç—Ç–∏
–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Ç–≤–æ–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º 
"""
        response = model.generate_content(prompt)
        recommendation = response.text
        show_card("ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", recommendation)


        # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Ç–∏–ø–æ–≤) –∏–∑ —Ç–µ–∫—Å—Ç–∞ ---
        def extract_first_match(text, keywords):
            for word in keywords:
                if re.search(rf"\b{word}\b", text.lower()):
                    return word
            return None

        body_type = extract_first_match(recommendation, body_types.keys())
        transmission = extract_first_match(recommendation, transmissions.keys())
        fuel = extract_first_match(recommendation, fuels.keys())

        if body_type and transmission and fuel:
            kolesa_url = f"https://kolesa.kz/cars/?auto-car-body={body_map[body_type]}&auto-transmission={trans_map[transmission]}&auto-engine-type={fuel_map[fuel]}"
            st.markdown(f"[üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–∫–∏–µ –∞–≤—Ç–æ –Ω–∞ Kolesa.kz]({kolesa_url})", unsafe_allow_html=True)
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ Kolesa.kz.")

# === Tab 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–µ–≥–∞ ===
with tabs[1]:
    df = raw_data.copy()
    st.subheader("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–µ–≥–∞")
    X, y, le_dict = preprocess_odometer_model(df)
    model = train_odometer_model(X, y)

    st.markdown("### –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    col1, col2 = st.columns(2)
    with col1:
        company = st.selectbox("Company", df["Company"].unique())
        mark = st.selectbox("Mark", df[df["Company"] == company]["Mark"].unique())
        year = st.number_input("Year", min_value=2000, max_value=2025, value=2015)
        mileage = st.number_input("Mileage (km)", value=100000)
    with col2:
        volume = st.number_input("Engine Volume (L)", value=2.0)
        fuel = st.selectbox("Fuel Type", df["Fuel Type"].unique())
        trans = st.selectbox("Transmission", df["Transmission"].unique())
        ctype = st.selectbox("Car Type", df["Car_type"].unique())

    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–±–µ–≥"):
        input_dict = {
            "Year": year,
            "Volume": volume,
            "Mileage": mileage,
            "Mark": le_dict["Mark"].transform([mark])[0],
            "Fuel Type": le_dict["Fuel Type"].transform([fuel])[0],
            "Transmission": le_dict["Transmission"].transform([trans])[0],
            "Car_type": le_dict["Car_type"].transform([ctype])[0],
        }
        X_input = pd.DataFrame([input_dict])
        prob = model.predict_proba(X_input)[0][1]
        pred = model.predict(X_input)[0]

        if pred == 1:
            show_card("‚úÖ –ü—Ä–æ–±–µ–≥ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π", "–ü—Ä–æ–±–µ–≥ –≤—ã–≥–ª—è–¥–∏—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ç–∏–ø–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.")
        else:
            show_card("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ —Å–∫—Ä—É—Ç–∫–∞ –ø—Ä–æ–±–µ–≥–∞", "–í–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—é —Å –æ–¥–æ–º–µ—Ç—Ä–æ–º.")



# === Tab 3: –û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω—ã ===
with tabs[2]:
    st.markdown("### üìä –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:")
    price_model = train_price_model(raw_data, encoders)
    company = st.selectbox("üè¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", sorted(raw_data['Company'].dropna().unique()), key="company_select")
    filtered_data = raw_data[raw_data['Company'] == company]
    mark = st.selectbox("üöò –ú–æ–¥–µ–ª—å", sorted(filtered_data['Mark'].dropna().unique()), key="model_select")
    year = st.number_input("üìÖ –ì–æ–¥", 1990, 2025, 2015, key="year_input")
    fuel = st.selectbox("‚õΩ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", sorted(raw_data['Fuel Type'].dropna().unique()), key="fuel_select")
    trans = st.selectbox("‚öôÔ∏è –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è", sorted(raw_data['Transmission'].dropna().unique()), key="trans_select")
    mileage = st.number_input("üõ£Ô∏è –ü—Ä–æ–±–µ–≥ (–∫–º)", 0, 1_000_000, 100_000, key="mileage_input")
    car_type = st.selectbox("üöó –¢–∏–ø –∫—É–∑–æ–≤–∞", sorted(raw_data['Car_type'].dropna().unique()), key="type_select")
    if st.button("üìà –û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", key="price_button"):
        new_car = pd.DataFrame({
            'Company': [company],
            'Mark': [mark],
            'Year': [year],
            'Fuel Type': [fuel],
            'Transmission': [trans],
            'Mileage': [mileage],
            'Car_type': [car_type]
        })

        try:
            for col in categorical_cols:
                new_car[col] = new_car[col].astype(str).str.upper()
                if any(v not in encoders[col].classes_ for v in new_car[col]):
                    raise ValueError(f"‚ùå Unknown value in column '{col}'")
                new_car[col] = encoders[col].transform(new_car[col])

            pred_price = price_model.predict(new_car)[0]
            st.success(f"üíµ –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **{int(pred_price):,} ‚Ç∏**")

            filtered_similar = raw_data[
                (raw_data["Company"] == company) &
                (raw_data["Mark"] == mark) &
                (abs(raw_data["Year"] - year) <= 2) &
                (raw_data["Fuel Type"] == fuel) &
                (raw_data["Transmission"] == trans) &
                (abs(raw_data["Mileage"] - mileage) <= 40000) &
                (raw_data["Car_type"] == car_type)
            ]
            if not filtered_similar.empty:
                st.markdown("### üîç –ü–æ—Ö–æ–∂–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
                st.dataframe(filtered_similar.head(3).reset_index(drop=True))
            else:
                st.info("–ü–æ—Ö–æ–∂–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        except ValueError as e:
            st.error(str(e))

# === Tab 4: –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ===
with tabs[3]:
    st.markdown("### üìÜ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    car_price = st.number_input("–¶–µ–Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (‚Ç∏)", min_value=100000, value=1000000, step=10000)
    down_payment = st.number_input("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å (‚Ç∏)", min_value=0, max_value=car_price, value=int(car_price * 0.2), step=10000)
    term = st.slider("–°—Ä–æ–∫ (–º–µ—Å)", 6, 84, 36, step=6)
    rate = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (% –≤ –≥–æ–¥)", 0.0, 100.0, 10.0, step=0.1)

    if car_price > down_payment:
        loan = car_price - down_payment
        monthly_rate = (rate / 100) / 12

        if rate > 0:
            m = monthly_rate
            monthly = loan * (m * (1 + m)**term) / ((1 + m)**term - 1)
        else:
            monthly = loan / term

        st.success(f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: **{int(monthly):,} ‚Ç∏**")
    else:
        st.warning("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ü–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è")

with tabs[4]:
    st.header("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    st.markdown("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏:")
    st.markdown("[üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ Google Form](https://forms.gle/TK6861iUrVVjtdDHA)")
